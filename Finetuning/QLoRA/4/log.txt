training_args = TrainingArguments(
        learning_rate = 1e-4, # Learning rate change 
        lr_scheduler_type = "cosine_with_restarts", # Control learning rate change
        lr_scheduler_kwargs= {"num_cycles": 10},
        warmup_ratio= 0.05,
        weight_decay = 0.01,
        save_strategy= "steps",
        save_steps= 10,
        eval_steps= 25,
        eval_strategy= "steps",
        logging_steps= 1,
        gradient_accumulation_steps = 16, # Accumulate gradients for larger batch size
        eval_accumulation_steps= 16,
        per_device_train_batch_size= 1, # Batch size per GPU 
        per_device_eval_batch_size= 1,
        max_steps = 500,
        seed = 3407,
        fp16 = True, # Use mixed precision training for faster training
        optim = "adamw_torch",
        # group_by_length = True, # Group samples of same length to reduce padding and speed up training
        output_dir = "Finetuning/Fine-tuned_checkpoint/medical_3/QLoRA/4",
        max_grad_norm= 1.0  # Apply gradient clipping
    )
config = LoraConfig(
    r = 8,
    lora_alpha=32,
    lora_dropout=0.05, #kind of like a regularization dropout
    bias="none",
    task_type="CAUSAL_LM"
)
# Training setup
trainer = SFTTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = filtered_tokenized_dataset['train'],
    eval_dataset= filtered_tokenized_dataset['test'],
    dataset_text_field = "text",
    # packing = False, # Can make training 5x faster for short sequences.
    args = training_args,
    max_seq_length= 1024,
    dataset_batch_size= 2048,
)