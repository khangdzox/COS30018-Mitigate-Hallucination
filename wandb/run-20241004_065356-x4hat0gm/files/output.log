

  1%|█▏                                                                                                                                      | 1/110 [01:21<2:27:25, 81.15s/it]
{'loss': 1.7449, 'grad_norm': nan, 'learning_rate': 0.0, 'epoch': 0.0}


  3%|███▋                                                                                                                                    | 3/110 [03:43<2:10:32, 73.20s/it]

  4%|████▉                                                                                                                                   | 4/110 [04:53<2:07:07, 71.96s/it]

  5%|██████▏                                                                                                                                 | 5/110 [06:02<2:04:34, 71.19s/it]

  5%|███████▍                                                                                                                                | 6/110 [07:12<2:02:11, 70.50s/it]

  6%|████████▋                                                                                                                               | 7/110 [08:21<2:00:18, 70.08s/it]

  7%|█████████▉                                                                                                                              | 8/110 [09:30<1:58:26, 69.67s/it]

  8%|███████████▏                                                                                                                            | 9/110 [10:38<1:56:28, 69.19s/it]

  9%|████████████▎                                                                                                                          | 10/110 [11:46<1:54:34, 68.75s/it]

 10%|█████████████▌                                                                                                                         | 11/110 [12:50<1:51:09, 67.37s/it]

 11%|██████████████▋                                                                                                                        | 12/110 [13:41<1:41:47, 62.32s/it]
{'loss': 1.9517, 'grad_norm': 7.797883987426758, 'learning_rate': 0.00019995524322835034, 'epoch': 0.0}

 12%|███████████████▉                                                                                                                       | 13/110 [14:30<1:34:39, 58.55s/it]

 13%|█████████████████▏                                                                                                                     | 14/110 [15:20<1:29:16, 55.79s/it]

 14%|██████████████████▍                                                                                                                    | 15/110 [16:08<1:24:52, 53.60s/it]

 15%|███████████████████▋                                                                                                                   | 16/110 [16:57<1:21:26, 51.98s/it]


 16%|██████████████████████                                                                                                                 | 18/110 [18:31<1:15:51, 49.48s/it]
{'loss': 1.5921, 'grad_norm': 5.317159175872803, 'learning_rate': 0.00019781476007338058, 'epoch': 0.0}


 18%|████████████████████████▌                                                                                                              | 20/110 [19:59<1:09:59, 46.66s/it]
{'loss': 1.4258, 'grad_norm': 6.652439594268799, 'learning_rate': 0.00019639628606958533, 'epoch': 0.0}


 20%|███████████████████████████                                                                                                            | 22/110 [23:29<2:00:13, 81.97s/it]
{'loss': 1.3963, 'grad_norm': 7.004761219024658, 'learning_rate': 0.00019463273837991643, 'epoch': 0.0}

 21%|████████████████████████████                                                                                                          | 23/110 [26:14<2:35:03, 106.93s/it]


 23%|██████████████████████████████▍                                                                                                       | 25/110 [32:26<3:28:39, 147.29s/it]

 24%|███████████████████████████████▋                                                                                                      | 26/110 [35:30<3:41:42, 158.37s/it]
 24%|███████████████████████████████▋                                                                                                      | 26/110 [35:30<3:41:42, 158.37s/it]Traceback (most recent call last):
  File "c:\Users\pink\Documents\Study\Intelligent Systems\COS30018-Mitigate-Hallucination\Finetuning\LLAMA3_LoRA.py", line 221, in <module>
    main()
  File "c:\Users\pink\Documents\Study\Intelligent Systems\COS30018-Mitigate-Hallucination\Finetuning\LLAMA3_LoRA.py", line 217, in main
    trainer.train()
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\trl\trainer\sft_trainer.py", line 451, in train
    output = super().train(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\transformers\trainer.py", line 1948, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\transformers\trainer.py", line 2289, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\transformers\trainer.py", line 3359, in training_step
    self.accelerator.backward(loss, **kwargs)
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\accelerate\accelerator.py", line 2155, in backward
    self.scaler.scale(loss).backward(**kwargs)
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\torch\_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\torch\autograd\__init__.py", line 289, in backward
    _engine_run_backward(
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\torch\autograd\graph.py", line 768, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt