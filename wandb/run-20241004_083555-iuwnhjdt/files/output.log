

  1%|█▎                                                                                                                                        | 1/110 [00:02<04:26,  2.44s/it]

  2%|██▌                                                                                                                                       | 2/110 [00:04<03:58,  2.21s/it]

  3%|███▊                                                                                                                                      | 3/110 [00:06<03:48,  2.13s/it]

  4%|█████                                                                                                                                     | 4/110 [00:08<03:42,  2.10s/it]

  5%|██████▎                                                                                                                                   | 5/110 [00:10<03:37,  2.08s/it]

  5%|███████▌                                                                                                                                  | 6/110 [00:12<03:34,  2.06s/it]
  6%|████████▊                                                                                                                                 | 7/110 [00:14<03:30,  2.05s/it]Traceback (most recent call last):
  File "c:\Users\pink\Documents\Study\Intelligent Systems\COS30018-Mitigate-Hallucination\Finetuning\LLAMA3_QLoRA.py", line 245, in <module>
    main()
  File "c:\Users\pink\Documents\Study\Intelligent Systems\COS30018-Mitigate-Hallucination\Finetuning\LLAMA3_QLoRA.py", line 241, in main
    trainer.train()
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\trl\trainer\sft_trainer.py", line 451, in train
    output = super().train(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\transformers\trainer.py", line 1948, in train
    return inner_training_loop(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\pink\anaconda3\envs\LLama3-hallucinate\Lib\site-packages\transformers\trainer.py", line 2294, in _inner_training_loop
    and (torch.isnan(tr_loss_step) or torch.isinf(tr_loss_step))
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt
{'loss': 2.1594, 'grad_norm': 5.018947124481201, 'learning_rate': 0.00016, 'epoch': 0.0}